function sessionID= yul_train_from_featmap(dbFmTrain, dbFmVal, varargin)
    opts= struct(...
        'netID', 'caffe', ...
        'layerName', 'conv5', ...
        'method', 'vlad_preL2_intra', ...
        'batchSize', 4, ...
        'learningRate', 0.0001, ...
        'lrDownFreq', 5, ...
        'lrDownFactor', 2, ...
        'weightDecay', 0.001, ...
        'momentum', 0.9, ...
        'backPropToLayer', 1, ...
        'fixLayers', [], ...
        'nNegChoice', 1000, ...
        'nNegCap', 10, ...
        'nNegCache', 10, ...
        'nEpoch', 30, ...
        'margin', 0.1, ...
        'excludeVeryHard', false, ...
        'sessionID', [], ...
        'outPrefix', [], ...
        'dbCheckpoint0', [], ...
        'qCheckpoint0', [], ...
        'dbCheckpoint0val', [], ...
        'qCheckpoint0val', [], ...
        'checkpoint0suffix', '', ...
        'info', '', ...
        'test0', true, ...
        'saveFrequency', 2000, ...
        'compFeatsFrequency', 1000, ...
        'computeBatchSize', 10, ...
        'epochTestFrequency', 1, ...
        'doDraw', false, ...
        'printLoss', false, ...
        'printBatchLoss', false, ...
        'nTestSample', 1000, ...
        'nTestRankSample', 5000, ...
        'recallNs', [1:5, 10:5:100], ...
        'useGPU', true, ...
        'numThreads', 12, ...
        'startEpoch', 1, ...
        'clsnum', 101, ...
        'featlen', 64*512 ...
        );
    paths= localPaths();
    opts= vl_argparse(opts, varargin);
    opts.fixLayers = {};
    
    %% ----- Network setup

    net= yul_loadNet(opts.netID);

    %% --- Add my layers
    net= yul_addLayers(net, opts, dbTrain);

    %% --- Prepare for train
    net= netPrepareForTrain(net);
    
    %% --- BP config
    opts.backPropToLayer= 1;
    opts.backPropToLayerName= net.layers{opts.backPropToLayer}.name;
    opts.backPropDepth= length(net.layers)-opts.backPropToLayer+1;
    assert( all(ismember(opts.fixLayers, relja_layerNames(net))) );
    
    %% --- Train para config
    if opts.useGPU
        net= relja_simplenn_move(net, 'gpu');
    end
    nBatches= floor( dbFmTrain.numVideos / opts.batchSize ); % some might be cut, no biggie
    batchSaveFrequency= ceil(opts.saveFrequency/opts.batchSize);
    batchCompFeatsFrequency= ceil(opts.compFeatsFrequency/opts.batchSize);
    
    %% --- Training
    
    
    
    
end